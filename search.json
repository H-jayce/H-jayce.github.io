[{"title":"开发笔记_1","date":"2021-08-17T16:00:00.000Z","url":"/2021/08/18/Genvi_KaiFa/","tags":[["Genvi开发","/tags/Genvi%E5%BC%80%E5%8F%91/"]],"categories":[["编程","/categories/%E7%BC%96%E7%A8%8B/"]],"content":"1. 工程新建1.1 新建DLL 工程文件 file –&gt;new –&gt;project; Visual c++ –&gt;win32 –&gt;win32 project; next –&gt;dll –&gt;MFC。 1.2 添加头文件内容 复制原“stdafx.h“ 内容(就这点东西，艹了，直接挂掉)。 (#include 头文件路径自己调整) “iMath.h”(不会用，不知道计算原理，使用很危险) 原文本编码格式“GB18030” 1.3 工程环境依赖 Properties–&gt;General–&gt;Target Platform Version–&gt;10.0.14393.0；(软件开发平台工具包) Properties–&gt;General–&gt;Use of MFC–&gt;Use MFC in a Shared DLL；(微软cpp封装API，界面开发) Properties–&gt;Debugging–&gt;Command–&gt;$(OutDir)\\Genvi.exe；Release + x64;(调试路径)复制–&gt;之前$(OutDir)路径下的文件一股脑all in；(不认识的东西，应该是调试的依赖) Properties–&gt;C/C++–&gt;General–&gt;Additional Include Directories–`$(SolutionDir)Gdemrt；(头文件)复制–&gt;$(SolutionDir)Gdemrt； Properties–&gt;Linker–&gt;General–&gt;Additional Library Direction–$(OutDir)Properties–&gt;Linker–&gt;Input–&gt;Additional Dependencies–&gt;Gdemrt.lib.(链接库)复制–&gt;$(OutDir)Gdemrt.lib "},{"title":"Graph Neural Network","date":"2021-08-17T16:00:00.000Z","url":"/2021/08/18/Graph_Neural_Network/","tags":[["图神经网络","/tags/%E5%9B%BE%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"]],"categories":[["机器学习","/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"]],"content":"图神经网络"},{"title":"Pytorch_GPU","date":"2021-08-16T16:00:00.000Z","url":"/2021/08/17/Pytorch_GPU/","tags":[["软件","/tags/%E8%BD%AF%E4%BB%B6/"]],"categories":[["机器学习","/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"]],"content":"PyTorch是一个开源的Python机器学习库，基于Torch，用于自然语言处理等应用程序。 2017年1月，由Facebook人工智能研究院（FAIR）基于Torch推出了PyTorch。它是一个基于Python的可续计算包，提供两个高级功能： 1、具有强大的GPU加速的张量计算（如NumPy）。 2、包含自动求导系统的深度神经网络。 1. 安装conda1.1 Anaconda安装包1.2 安装annacondabash Anaconda*.sh 1.3 检查conda版本conda --version 2. 安装NVIDIA2.1 sudo apt install nvidia-driver-4402.2 输入secure boot 密码2.3 关机重启，进入界面2.4 选择enroll mok $\\rightarrow$ continue $\\rightarrow$ yes $\\rightarrow$输入设置的secure boot密码 $\\rightarrow$​ reboot2.5 进入桌面nvidia-smi 3.安装CUDA3.1 sudo apt install nvidia-cuda-toolkit3.2 查看版本nvcc -V 4. 安装PyTorch_GPUPyTorch官网 4.1 conda添加清华源conda config --add channels  conda config --add channels  conda config --add channels  conda config --set show_channel_urls yes 4.2 CPUconda install pytorch torchvision torchaudio cpuonly -c pytorch 4.3 GPUconda install pytorch torchvision torchaudio cudatoolkit=10.1 5. 检查5.1 PyTor_CPUpython import torch print(torch.rand(5, 3)) 1 2 3 4 5tensor([[0.7963, 0.8564, 0.6089], [0.0640, 0.8827, 0.4916], [0.9320, 0.1722, 0.3863], [0.3529, 0.3285, 0.3255], [0.1337, 0.7180, 0.5241]]) 复制 5.2 PyTor_GPUpython import torch torch.cuda.is_available() 1 True "},{"title":"cpp","date":"2021-08-16T16:00:00.000Z","url":"/2021/08/17/cpp/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":"1.Python格式化字符 More info: 格式化输出 2.markdown中公式编辑教程 编程——计算——建模——抽象——设定范围。 编程步骤：输入——处理——输出。 3.1 基础如何编译，调试，环境设置; C++语言，语法，语义基础。 3.2 核心面向对象思想;封装，继承，多态;模板，STL;IO，Lambda。 4.1 教材：C++编辑思想、C++程序设计语言、软件调试的艺术。4.2 VirtualBox导入镜像文件 创建文本：touch test.cpp 编译链接：g++ test.cpp 显示当前目录全部内容：ls -lart,直接使用 ll C++标识符C++是区分大小写的编程语言 C/C++基本编译和执行过程预处理——头文件（.hpp）和宏文件展开——生成(.i)文件编译——词法分析，优化，代码生成——（.asm）文件，汇编代码——生成(.o/.obj)文件链接——将（.o）文件和动态库文件（.so）链接——生成可执行文件执行可执行文件预处理——cpp test.cpp&gt;test.i 编译——g++ -g -S test.i 汇编—— as -o test.o test.s gcc -g -c test.c; objdump -d -M intel -S test.o 链接——Id -o myTest test.o …[其他链接选项] C/C++核心调试技术：GDB 1 直接调试：gdb a.out break main run ​ 4.2 通过界面调试 gdb test --tui next 对象，类型，变量和值对象 类型 变量 值 1.基本内置类型：char,unsigned char,signed char int, shortint, longint, float,double,long double 2.自定义类型： C++指针类型指针类型的变量，其值为另一个变量的地址 int *ip; //一个整形的指针 float *fp; //一个浮点型的指针 int *mp; //一个整形指针的指针 int i = 42;int是整数类型，i是变量，42是值 int* p = &i;int*是指针类型（指向整数）， p是变量，&amp;i返回一个地址用作值"}]